import json
import ipaddress
from datetime import datetime, date
from typing import Dict, List, Optional
from urllib.parse import urlparse
from pathlib import Path

class AuthorizationManager:
    """Manages authorization and scope for penetration testing"""
    
    def __init__(self):
        self.authorization: Optional[Dict] = None
        self.auth_file_path: Optional[Path] = None
        
    def load_authorization(self, auth_file: str) -> bool:
        """Load authorization from JSON file"""
        try:
            self.auth_file_path = Path(auth_file)
            with open(auth_file, 'r') as f:
                self.authorization = json.load(f)
            
            required_fields = ['client', 'authorization_date', 'expiry_date', 
                             'authorized_targets', 'contact']
            
            for field in required_fields:
                if field not in self.authorization:
                    raise ValueError(f"Missing required field: {field}")
            
            return True
            
        except Exception as e:
            print(f"Error loading authorization: {e}")
            return False
    
    def is_initialized(self) -> bool:
        """Check if authorization is loaded"""
        return self.authorization is not None
    
    def is_expired(self) -> bool:
        """Check if authorization has expired"""
        if not self.authorization:
            return True
        
        expiry = datetime.strptime(self.authorization['expiry_date'], '%Y-%m-%d').date()
        return date.today() > expiry
    
    def days_until_expiry(self) -> int:
        """Get days until authorization expires"""
        if not self.authorization:
            return 0
        
        expiry = datetime.strptime(self.authorization['expiry_date'], '%Y-%m-%d').date()
        delta = expiry - date.today()
        return max(0, delta.days)
    
    def is_target_authorized(self, target: str) -> bool:
        """Check if a target IP/network is authorized"""
        if not self.authorization or self.is_expired():
            return False
        
        authorized = self.authorization.get('authorized_targets', [])
        excluded = self.authorization.get('excluded_targets', [])
        
        try:
            target_ip = ipaddress.ip_address(target)
            
            for excluded_target in excluded:
                if '/' in excluded_target:
                    if target_ip in ipaddress.ip_network(excluded_target):
                        return False
                elif target_ip == ipaddress.ip_address(excluded_target):
                    return False
            
            for auth_target in authorized:
                if '/' in auth_target:
                    if target_ip in ipaddress.ip_network(auth_target):
                        return True
                elif target_ip == ipaddress.ip_address(auth_target):
                    return True
                    
        except ValueError:
            for auth_target in authorized:
                if auth_target == target or target.endswith(f".{auth_target}"):
                    return True
        
        return False
    
    def is_url_authorized(self, url: str) -> bool:
        """Check if a URL is authorized for testing"""
        if not self.authorization or self.is_expired():
            return False
        
        parsed = urlparse(url)
        hostname = parsed.hostname
        
        if not hostname:
            return False
        
        return self.is_target_authorized(hostname)
    
    def get_client_name(self) -> str:
        """Get client name"""
        return self.authorization.get('client', 'Unknown') if self.authorization else 'Not initialized'
    
    def get_expiry_date(self) -> str:
        """Get authorization expiry date"""
        return self.authorization.get('expiry_date', 'Unknown') if self.authorization else 'Not initialized'
    
    def get_authorized_targets(self) -> List[str]:
        """Get list of authorized targets"""
        return self.authorization.get('authorized_targets', []) if self.authorization else []
    
    def get_restrictions(self) -> List[str]:
        """Get testing restrictions"""
        return self.authorization.get('restrictions', []) if self.authorization else []
    
    def get_contact_info(self) -> Dict[str, str]:
        """Get contact information"""
        return self.authorization.get('contact', {}) if self.authorization else {}