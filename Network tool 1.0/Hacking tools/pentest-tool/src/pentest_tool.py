#!/usr/bin/env python3

import click
import json
import sys
import logging
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional

from .auth import AuthorizationManager
from .scanner import NetworkScanner
from .webapp import WebAppScanner
from .reporter import ReportGenerator
from .audit import AuditLogger

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@click.group()
@click.pass_context
def cli(ctx):
    """Authorized Penetration Testing Tool - Professional security assessment framework"""
    ctx.ensure_object(dict)
    ctx.obj['audit'] = AuditLogger()
    
@cli.command()
@click.option('--auth-file', required=True, help='Authorization JSON file')
@click.pass_context
def init(ctx, auth_file):
    """Initialize tool with authorization file"""
    try:
        auth_manager = AuthorizationManager()
        if auth_manager.load_authorization(auth_file):
            ctx.obj['audit'].log_action('init', {'auth_file': auth_file})
            click.echo("✓ Authorization loaded successfully")
            click.echo(f"✓ Client: {auth_manager.get_client_name()}")
            click.echo(f"✓ Valid until: {auth_manager.get_expiry_date()}")
            click.echo(f"✓ Authorized targets: {len(auth_manager.get_authorized_targets())}")
        else:
            click.echo("✗ Failed to load authorization", err=True)
            sys.exit(1)
    except Exception as e:
        click.echo(f"✗ Error: {str(e)}", err=True)
        sys.exit(1)

@cli.command()
@click.option('--target', required=True, help='Target IP or network (must be authorized)')
@click.option('--type', type=click.Choice(['discovery', 'port', 'service', 'vuln']), 
              default='discovery', help='Scan type')
@click.option('--ports', default='1-1000', help='Port range for port scan')
@click.pass_context
def scan(ctx, target, type, ports):
    """Perform network scanning (with authorization check)"""
    auth_manager = AuthorizationManager()
    
    if not auth_manager.is_initialized():
        click.echo("✗ Not initialized. Run 'pentest-tool init' first", err=True)
        sys.exit(1)
    
    if not auth_manager.is_target_authorized(target):
        click.echo(f"✗ Target {target} is not authorized for testing", err=True)
        ctx.obj['audit'].log_unauthorized_attempt('scan', target)
        sys.exit(1)
    
    click.echo(f"✓ Starting {type} scan on {target}")
    ctx.obj['audit'].log_action('scan', {
        'target': target,
        'type': type,
        'ports': ports
    })
    
    scanner = NetworkScanner(auth_manager)
    
    try:
        if type == 'discovery':
            results = scanner.discovery_scan(target)
        elif type == 'port':
            results = scanner.port_scan(target, ports)
        elif type == 'service':
            results = scanner.service_scan(target, ports)
        elif type == 'vuln':
            results = scanner.vulnerability_scan(target)
        
        click.echo(f"✓ Scan completed. Found {len(results)} results")
        
        for result in results:
            click.echo(json.dumps(result, indent=2))
            
    except Exception as e:
        click.echo(f"✗ Scan error: {str(e)}", err=True)
        ctx.obj['audit'].log_error('scan', str(e))
        sys.exit(1)

@cli.command()
@click.option('--url', required=True, help='Target web application URL')
@click.option('--depth', default=2, help='Crawl depth')
@click.option('--checks', multiple=True, 
              default=['xss', 'sqli', 'csrf'], 
              help='Security checks to perform')
@click.pass_context
def webapp(ctx, url, depth, checks):
    """Web application security testing"""
    auth_manager = AuthorizationManager()
    
    if not auth_manager.is_initialized():
        click.echo("✗ Not initialized. Run 'pentest-tool init' first", err=True)
        sys.exit(1)
    
    if not auth_manager.is_url_authorized(url):
        click.echo(f"✗ URL {url} is not authorized for testing", err=True)
        ctx.obj['audit'].log_unauthorized_attempt('webapp', url)
        sys.exit(1)
    
    click.echo(f"✓ Starting web application scan on {url}")
    ctx.obj['audit'].log_action('webapp', {
        'url': url,
        'depth': depth,
        'checks': list(checks)
    })
    
    webapp_scanner = WebAppScanner(auth_manager)
    
    try:
        results = webapp_scanner.scan(url, depth, checks)
        click.echo(f"✓ Web scan completed. Found {len(results)} issues")
        
        for issue in results:
            severity = issue.get('severity', 'info').upper()
            click.echo(f"[{severity}] {issue['type']}: {issue['description']}")
            
    except Exception as e:
        click.echo(f"✗ Web scan error: {str(e)}", err=True)
        ctx.obj['audit'].log_error('webapp', str(e))
        sys.exit(1)

@cli.command()
@click.option('--format', type=click.Choice(['json', 'html', 'pdf']), 
              default='html', help='Report format')
@click.option('--output', required=True, help='Output file path')
@click.option('--include-audit', is_flag=True, help='Include audit log in report')
@click.pass_context
def report(ctx, format, output, include_audit):
    """Generate penetration testing report"""
    click.echo(f"✓ Generating {format} report")
    
    reporter = ReportGenerator()
    audit_log = ctx.obj['audit'].get_logs() if include_audit else None
    
    try:
        reporter.generate(
            format=format,
            output_path=output,
            audit_log=audit_log
        )
        click.echo(f"✓ Report saved to {output}")
        
    except Exception as e:
        click.echo(f"✗ Report generation error: {str(e)}", err=True)
        sys.exit(1)

@cli.command()
@click.pass_context
def status(ctx):
    """Check authorization and tool status"""
    auth_manager = AuthorizationManager()
    
    if not auth_manager.is_initialized():
        click.echo("✗ Tool not initialized", err=True)
        return
    
    click.echo("Tool Status:")
    click.echo(f"✓ Client: {auth_manager.get_client_name()}")
    click.echo(f"✓ Authorization expires: {auth_manager.get_expiry_date()}")
    click.echo(f"✓ Days remaining: {auth_manager.days_until_expiry()}")
    
    if auth_manager.is_expired():
        click.echo("⚠ Authorization has expired!", err=True)
    
    click.echo(f"\nAuthorized targets:")
    for target in auth_manager.get_authorized_targets():
        click.echo(f"  • {target}")
    
    click.echo(f"\nRestrictions:")
    for restriction in auth_manager.get_restrictions():
        click.echo(f"  • {restriction}")

if __name__ == '__main__':
    cli(obj={})