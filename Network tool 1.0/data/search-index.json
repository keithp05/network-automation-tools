[["script_device_health_check.py",{"id":"script_device_health_check.py","type":"script","title":"Device Health Check","data":{"filename":"device_health_check.py","name":"Device Health Check","description":"Check the health status of all network devices","tags":["health","monitoring","devices"],"preview":"#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n# Script Metadata\n# @name: Device Health Check\n# @description: Check the health status of all network devices\n# @author: System\n# @version: 1.0\n# @tags: health, monitoring, devices\n# @requires: ping, ssh\n# @parameters: []\n\n\n# @name: Device Health Check\n# @description: Check the health status of all network devices\n# @author: System\n# @version: 1.0\n# @tags: health, monitoring, devices\n# @requires: ping, ssh\n# @parameters: []\n\nimport time\n\ndef check_"},"searchableText":"device health check check the health status of all network devices health monitoring devices #!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n# script metadata\n# @name: device health check\n# @description: check the health status of all network devices\n# @author: system\n# @version: 1.0\n# @tags: health, monitoring, devices\n# @requires: ping, ssh\n# @parameters: []\n\n\n# @name: device health check\n# @description: check the health status of all network devices\n# @author: system\n# @version: 1.0\n# @tags: health, monitoring, devices\n# @requires: ping, ssh\n# @parameters: []\n\nimport time\n\ndef check_device_health():\n    devices = get_network_devices()\n    log_message(f\"checking health of {len(devices)} devices...\")\n    \n    results = []\n    for device in devices:\n        ip = device.get('ip', '')\n        hostname = device.get('hostname', 'unknown')\n        \n        # ping test\n        is_reachable = ping_device(ip)\n        \n        result = {\n            'ip': ip,\n            'hostname': hostname,\n            'reachable': is_reachable,\n            'timestamp': time.time()\n        }\n        \n        if is_reachable:\n            log_message(f\"✓ {hostname} ({ip}) is reachable\")\n        else:\n            log_message(f\"✗ {hostname} ({ip}) is not reachable\", 'warning')\n        \n        results.append(result)\n    \n    save_result('device_health_check', results)\n    return results\n\n# execute health check\nresults = check_device_health()\nprint(f\"\\nhealth check completed. {sum(1 for r in results if r['reachable'])} of {len(results)} devices are reachable.\")\n","timestamp":"2025-07-14T02:45:34.724Z"}],["script_interface_utilization_report.py",{"id":"script_interface_utilization_report.py","type":"script","title":"Interface Utilization Report","data":{"filename":"interface_utilization_report.py","name":"Interface Utilization Report","description":"Generate interface utilization report for specified device","tags":["interfaces","utilization","reporting"],"preview":"#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n# Script Metadata\n# @name: Interface Utilization Report\n# @description: Generate interface utilization report for specified device\n# @author: System\n# @version: 1.0\n# @tags: interfaces, utilization, reporting\n# @requires: snmp\n# @parameters: [{\"name\":\"device_ip\",\"type\":\"string\",\"required\":true,\"description\":\"Device IP address\"}]\n\n\n# @name: Interface Utilization Report\n# @description: Generate interface utilization report for specified device\n# @aut"},"searchableText":"interface utilization report generate interface utilization report for specified device interfaces utilization reporting #!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n# script metadata\n# @name: interface utilization report\n# @description: generate interface utilization report for specified device\n# @author: system\n# @version: 1.0\n# @tags: interfaces, utilization, reporting\n# @requires: snmp\n# @parameters: [{\"name\":\"device_ip\",\"type\":\"string\",\"required\":true,\"description\":\"device ip address\"}]\n\n\n# @name: interface utilization report\n# @description: generate interface utilization report for specified device\n# @author: system\n# @version: 1.0\n# @tags: interfaces, utilization, reporting\n# @requires: snmp\n# @parameters: [{\"name\": \"device_ip\", \"type\": \"string\", \"required\": true, \"description\": \"device ip address\"}]\n\ndef generate_utilization_report(device_ip):\n    log_message(f\"generating interface utilization report for {device_ip}\")\n    \n    # get interface statistics\n    interfaces = get_interface_stats(device_ip)\n    \n    if not interfaces:\n        log_message(f\"no interface data found for {device_ip}\", 'warning')\n        return none\n    \n    report = {\n        'device': device_ip,\n        'timestamp': time.time(),\n        'interfaces': []\n    }\n    \n    for intf in interfaces:\n        name = intf.get('name', 'unknown')\n        in_bytes = intf.get('inoctets', 0)\n        out_bytes = intf.get('outoctets', 0)\n        speed = intf.get('speed', 0)\n        \n        # calculate utilization\n        if speed > 0:\n            in_utilization = (in_bytes * 8 / speed) * 100\n            out_utilization = (out_bytes * 8 / speed) * 100\n        else:\n            in_utilization = 0\n            out_utilization = 0\n        \n        report['interfaces'].append({\n            'name': name,\n            'in_utilization': round(in_utilization, 2),\n            'out_utilization': round(out_utilization, 2),\n            'status': intf.get('operstatus', 'unknown')\n        })\n        \n        log_message(f\"interface {name}: in={in_utilization:.1f}%, out={out_utilization:.1f}%\")\n    \n    save_result(f'utilization_report_{device_ip}', report)\n    return report\n\n# execute report generation\nreport = generate_utilization_report(device_ip)\nif report:\n    print(f\"\\nreport generated for {len(report['interfaces'])} interfaces\")\n","timestamp":"2025-07-14T02:44:43.831Z"}],["script_network_topology_analyzer.py",{"id":"script_network_topology_analyzer.py","type":"script","title":"Network Topology Analyzer","data":{"filename":"network_topology_analyzer.py","name":"Network Topology Analyzer","description":"Analyze network topology and find critical paths","tags":["topology","analysis","paths"],"preview":"#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n# Script Metadata\n# @name: Network Topology Analyzer\n# @description: Analyze network topology and find critical paths\n# @author: System\n# @version: 1.0\n# @tags: topology, analysis, paths\n# @requires: networkx\n# @parameters: []\n\n\n# @name: Network Topology Analyzer\n# @description: Analyze network topology and find critical paths\n# @author: System\n# @version: 1.0\n# @tags: topology, analysis, paths\n# @requires: networkx\n# @parameters: []\n\nimport json\n\n"},"searchableText":"network topology analyzer analyze network topology and find critical paths topology analysis paths #!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n# script metadata\n# @name: network topology analyzer\n# @description: analyze network topology and find critical paths\n# @author: system\n# @version: 1.0\n# @tags: topology, analysis, paths\n# @requires: networkx\n# @parameters: []\n\n\n# @name: network topology analyzer\n# @description: analyze network topology and find critical paths\n# @author: system\n# @version: 1.0\n# @tags: topology, analysis, paths\n# @requires: networkx\n# @parameters: []\n\nimport json\n\ndef analyze_topology():\n    topology = get_network_topology()\n    log_message(\"analyzing network topology...\")\n    \n    nodes = topology.get('nodes', [])\n    links = topology.get('links', [])\n    \n    log_message(f\"topology contains {len(nodes)} nodes and {len(links)} links\")\n    \n    # find nodes with most connections (potential bottlenecks)\n    node_connections = {}\n    for link in links:\n        source = link.get('source')\n        target = link.get('target')\n        \n        node_connections[source] = node_connections.get(source, 0) + 1\n        node_connections[target] = node_connections.get(target, 0) + 1\n    \n    # sort by connection count\n    critical_nodes = sorted(node_connections.items(), key=lambda x: x[1], reverse=true)[:5]\n    \n    analysis = {\n        'total_nodes': len(nodes),\n        'total_links': len(links),\n        'critical_nodes': [\n            {'node': node, 'connections': count} \n            for node, count in critical_nodes\n        ],\n        'average_connections': sum(node_connections.values()) / len(node_connections) if node_connections else 0\n    }\n    \n    log_message(\"critical nodes (most connections):\")\n    for node, count in critical_nodes:\n        log_message(f\"  - {node}: {count} connections\")\n    \n    save_result('topology_analysis', analysis)\n    return analysis\n\n# execute analysis\nanalysis = analyze_topology()\nprint(f\"\\ntopology analysis completed. average connections per node: {analysis['average_connections']:.1f}\")\n","timestamp":"2025-07-14T02:44:43.840Z"}]]